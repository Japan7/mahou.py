{% if dataclasses -%}
from pydantic.dataclasses import dataclass
{% endif -%}
from pydantic import Field
{% if enums -%}
from enum import Enum
{% endif -%}
{% if need_typing -%}
from typing import {{need_typing | map('capitalize') | join(', ')}}
{% endif %}
{% for import in extra_imports -%}
{{import}}
{% endfor -%}

{% for enum in enums %}
class {{enum.name}}(str, Enum):
{%- for element in enum.elements %}
    {{element.name}} = {{element.value}}
{%- endfor %}
{% endfor -%}

{% for dataclass in dataclasses %}
@dataclass
class {{dataclass.name}}():
{%- for element in dataclass.required_elements %}
    {{element.name}}{% if element.type %}: {{element.type}}{% endif %}
    {%- if element.alias -%}
    = Field(serialization_alias="{{element.alias}}")
    {%- endif %}
{%- endfor -%}
{%- for element in dataclass.optional_elements %}
    {{element.name}}{% if element.type %}: {{element.type}} | None{% endif %}
    {%- if element.alias -%}
    = Field(serialization_alias="{{element.alias}}", default=None)
    {%- else -%}
    = None
    {%- endif %}
{%- endfor %}
{% endfor %}
