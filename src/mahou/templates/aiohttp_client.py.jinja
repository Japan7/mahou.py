from enum import Enum
from typing import {{need_typing | map('capitalize') | join(', ')}}{% if need_typing %}, {% endif %}Generic, Literal, Optional, TypeGuard, TypeVar, TYPE_CHECKING
if TYPE_CHECKING:
    from typing_extensions import StrictTypeGuard as TypeGuard  # type: ignore # noqa: F811
{% for import in extra_imports -%}
{{import}}
{% endfor -%}

import aiohttp

{% if model_types -%}
from .model import (
{%- for model_type in model_types -%}
    {{model_type}}{% if not loop.last %}, {% endif %}
{%- endfor -%}
)
{% endif %}

TCode = TypeVar('TCode')
TSuccess = TypeVar('TSuccess')
TError = TypeVar('TError')


class Success(Generic[TCode, TSuccess]):
    def __init__(self, code: TCode, result: TSuccess):
        self.code: TCode = code
        self.result: TSuccess = result


class Error(Generic[TCode, TError]):
    def __init__(self, code: TCode, result: TError):
        self.code: TCode = code
        self.result: TError = result


def success(maybe: Success | Error) -> TypeGuard[Success]:
    return isinstance(maybe, Success)


{% for module_name, operations in modules.items() %}
class {{module_name.capitalize()}}Module():
    def __init__(self, session: 'ClientSession', server_url: str):
        self.session: ClientSession = session
        self.server_url: str = server_url

{% for operation in operations %}
    async def {{operation.name}}(self
        {%- if operation.required_arguments or operation.optional_arguments %}, {% endif -%}
        {%- for arg in operation.required_arguments -%}
            {{arg.name}}: {{arg.type}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        {%- if operation.required_arguments and operation.optional_arguments %}, {% endif -%}
        {%- for arg in operation.optional_arguments -%}
            {{arg.name}}: Optional[{{arg.type}}] = None{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    ) -> Success[Literal[{{operation.responses_success|join(',')}}], {{operation.responses_success.values()|join(' | ')}}]{% if operation.responses_error %} | Error[Literal[{{operation.responses_error|join(',')}}], {{operation.responses_error.values()|join(' | ')}}]{% endif %}:
        url = f'{self.server_url}{{operation.endpoint}}'

        {%- if operation.query_parameters %}
        params = dict(
        {%- for parameter in operation.query_parameters -%}
            {{parameter}}={{parameter}},
        {%- endfor -%}
        )
        params = {k: v.value if isinstance(v, Enum) else v for k, v in params.items() if v is not None}
        {%- endif %}

        async with self.session.{{operation.method}}(url,
        {%- if operation.query_parameters -%}
            params=params,
        {%- endif %}
        {%- if operation.body -%}
            json=body,
        {%- endif -%}
        ) as resp:
            {%- for code, type in operation.responses_success.items() %}
            if resp.status == {{code}}:
                return Success[Literal[{{operation.responses_success|join(',')}}], {{operation.responses_success.values()|join(' | ')}}](
                    code={{code}}, result={% if type == 'None' -%}None
                                          {%- elif type.startswith('Union[') and type.endswith(']') -%}
                                              {%- set instantiable_type = type[6:-1].split(',')[0] -%}
                                              {%- if instantiable_type.startswith('list[') and instantiable_type.endswith(']') -%}
                                                  [{{instantiable_type[5:-1]}}(**e) for e in (await resp.json())]
                                              {%- else -%}
                                                  {{instantiable_type}}(**(await resp.json()))
                                              {%- endif -%}
                                          {%- elif type.startswith('list[') and type.endswith(']') -%}
                                              [{{type[5:-1]}}(**e) for e in (await resp.json())]
                                          {%- else -%}
                                              {{type}}(**(await resp.json()))
                                          {%- endif -%})
            {%- endfor %}
            {%- for code, type in operation.responses_error.items() %}
            if resp.status == {{code}}:
                return Error[Literal[{{operation.responses_error|join(',')}}], {{operation.responses_error.values()|join(' | ')}}](
                    code={{code}}, result={% if type == 'None' -%}None
                                          {%- elif type.startswith('Union[') and type.endswith(']') -%}
                                              {%- set instantiable_type = type[6:-1].split(',')[0] -%}
                                              {%- if instantiable_type.startswith('list[') and instantiable_type.endswith(']') -%}
                                                  [{{instantiable_type[5:-1]}}(**e) for e in (await resp.json())]
                                              {%- else -%}
                                                  {{instantiable_type}}(**(await resp.json()))
                                              {%- endif -%}
                                          {%- elif type.startswith('list[') and type.endswith(']') -%}
                                              [{{type[5:-1]}}(**e) for e in (await resp.json())]
                                          {%- else -%}
                                              {{type}}(**(await resp.json()))
                                          {%- endif -%})
            {%- endfor %}
            raise aiohttp.ClientResponseError(resp.request_info, resp.history, status=resp.status, message=resp.reason, headers=resp.headers)
{% endfor %}

{% endfor %}

class ClientSession(aiohttp.ClientSession):
    def __init__(self, server_url: str, *args, **kwargs):
        super().__init__(*args, **kwargs)
        {% for module in modules -%}
        self.{{module}}: {{module.capitalize()}}Module = {{module.capitalize()}}Module(self, server_url)
        {% endfor %}

{% for server in servers %}
def get{% if server.name %}_{{server.name}}{% endif %}_session(server_url: str, *args, **kwargs) -> ClientSession:
    return ClientSession(server_url, *args, **kwargs)
{% endfor %}
