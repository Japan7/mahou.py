import json
from typing import {% if need_typing.any %}Any, {% endif %}Generic, Mapping, Optional, {% if need_typing.union %}Union, {% endif %}TypeVar
from urllib import parse

import aiohttp

{% if model_types -%}
from .model import (
{%- for model_type in model_types -%}
    {{model_type}}{% if not loop.last %}, {% endif %}
{%- endfor -%}
, ModelFactory)
{% endif %}

Success = TypeVar('Success')
Error = TypeVar('Error')


class Maybe(Generic[Success, Error]):
    def __init__(self, success: Optional[Success] = None, error: Optional[Error] = None):
        self.code: int = -1
        self.success: Optional[Success] = success
        self.error: Optional[Error] = error


{% for module_name, operations in modules.items() %}
class {{module_name.capitalize()}}Module():
    def __init__(self, session: aiohttp.Session):
        self.session: aiohttp.Session = session

{% for operation in operations %}
    async def {{operation.name}}(self
        {%- if operation.required_arguments or operation.optional_arguments %}, {% endif -%}
        {%- for arg in operation.required_arguments -%}
            {{arg.name}}: {{arg.type}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        {%- if operation.required_arguments and operation.optional_arguments %}, {% endif -%}
        {%- for arg in operation.optional_arguments -%}
            {{arg.name}}: Optional[{{arg.type}}] = None{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    ) -> Maybe[{{' | '.join(operation.responses_success.values()) if operation.responses_success else None}}, {{' | '.join(operation.responses_error.values()) if operation.responses_error else None}}]:
        {% if operation.path_parameters -%}
            url = f'{{operation.endpoint.replace("{", "{parse.quote(json.dumps(").replace("}", "))}")}}'
        {%- else -%}
            url = '{{operation.endpoint}}'
        {%- endif %}

        {%- if operation.query_parameters %}
        first_query_parameter = True
        {%- for parameter in operation.query_parameters %}
        if {{parameter}}:
            if first_query_parameter:
                url += f'?{{parameter}}={parse.quote(json.dumps({{parameter}}))}'
                first_query_parameter = False
            else:
                url += f'&{{parameter}}={parse.quote(json.dumps({{parameter}}))}'
        {%- endfor -%}
        {%- endif %}

        {% if operation.body -%}
        async with self.session.{{operation.method}}(url, content=json.dumps(body)) as resp:
        {%- else -%}
        async with self.session.{{operation.method}}(url) as resp:
        {%- endif %}
            assert resp.status in {{operation.responses_success.keys()|list + operation.responses_error.keys()|list}}
            maybe = Maybe[{{' | '.join(operation.responses_success.values()) if operation.responses_success else None}}, {{' | '.join(operation.responses_error.values()) if operation.responses_error else None}}]()
            {%- for code, type in operation.responses_success.items() %}
            if resp.status == {{code}}:
                maybe.success = {% if type == 'None' -%}None
                                {%- elif type.startswith('Union[') and type.endswith(']') -%}
                                    {%- set instantiable_type = type[6:-1].split(',')[0] -%}
                                    {%- if instantiable_type.startswith('list[') and instantiable_type.endswith(']') -%}
                                        [ModelFactory.{{instantiable_type[5:-1]}}_from_dict(e) for e in await resp.json()]
                                    {%- else -%}
                                        ModelFactory.{{instantiable_type}}_from_dict(await resp.json())
                                    {%- endif -%}
                                {%- elif type.startswith('list[') and type.endswith(']') -%}
                                    [ModelFactory.{{type[5:-1]}}_from_dict(e) for e in await resp.json()]
                                {%- else -%}
                                    ModelFactory.{{type}}_from_dict(await resp.json())
                                {%- endif -%}
            {%- endfor %}
            {%- for code, type in operation.responses_error.items() %}
            if resp.status == {{code}}:
                maybe.error = {% if type == 'None' -%}None
                                {%- elif type.startswith('Union[') and type.endswith(']') -%}
                                    {%- set instantiable_type = type[6:-1].split(',')[0] -%}
                                    {%- if instantiable_type.startswith('list[') and instantiable_type.endswith(']') -%}
                                        [ModelFactory.{{instantiable_type[5:-1]}}_from_dict(e) for e in await resp.json()]
                                    {%- else -%}
                                        ModelFactory.{{instantiable_type}}_from_dict(await resp.json())
                                    {%- endif -%}
                              {%- elif type.startswith('list[') and type.endswith(']') -%}
                                  [ModelFactory.{{type[5:-1]}}_from_dict(e) for e in await resp.json()]
                              {%- else -%}
                                  ModelFactory.{{type}}_from_dict(await resp.json())
                              {%- endif -%}
            {%- endfor %}
            return maybe
{% endfor %}

{% endfor %}

class ClientSession(aiohttp.ClientSession):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        {% for module in modules -%}
        self.{{module}}: {{module.capitalize()}}Module = {{module.capitalize()}}Module(self)
        {% endfor %}

{% for server in servers %}
def get{% if server.name %}_{{server.name}}{% endif %}_session(server_url: str, headers: Optional[Mapping[str, str]] = None) -> aiohttp.ClientSession:
    return ClientSession(base_url=f'{server_url}{{server.url}}', headers=headers)
{% endfor %}
