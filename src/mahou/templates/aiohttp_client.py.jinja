from collections.abc import Sequence
from dataclasses import dataclass
from enum import Enum
from typing import {{need_typing | map('capitalize') | join(', ')}}{% if need_typing %}, {% endif %}Any, Literal, TypeGuard

import dataclasses
import json

import aiohttp
from aiohttp.typedefs import Query
from pydantic import BaseModel
from yarl import QueryVariable, SimpleQuery

{% for import in extra_imports -%}
{{import}}
{% endfor -%}

{% if model_types -%}
from .model import (
{%- for model_type in model_types -%}
    {{model_type}}{% if not loop.last %}, {% endif %}
{%- endfor -%}
)
{% endif %}


@dataclass(slots=True)
class Success[TCode, TSuccess]:
    code: TCode
    result: TSuccess


@dataclass(slots=True)
class Error[TCode, TError]:
    code: TCode
    result: TError


def success[S: Success[Any, Any]](maybe: S | Error[Any, Any]) -> TypeGuard[S]:
    return isinstance(maybe, Success)


def prep_scalar_serializationion(v: Any) -> SimpleQuery:
    # SimpleQuery is str, int, float at time of writing
    if isinstance(v, SimpleQuery):
        return v
    else:
        # FIXME: breaks things, maybe
        return str(v)


def prep_seq_serialization(v: Sequence[Any]) -> Sequence[SimpleQuery]:
    return tuple(prep_scalar_serializationion(lv) for lv in v)


def prep_val_serialization(v: Any) -> QueryVariable:
    if isinstance(v, Enum):
        return prep_val_serialization(v.value)
    elif isinstance(v, Sequence) and not isinstance(v, str):
        return prep_seq_serialization(v)
    else:
        return prep_scalar_serializationion(v)


def prep_serialization(d: dict[str, Any]) -> Query:
    return {k: prep_val_serialization(v) for k, v in d.items()
            if v is not None}


class JsonDataclassEncoder(json.JSONEncoder):

    def default(self, o: Any):
        if isinstance(o, BaseModel):
            return o.model_dump(by_alias=True)
        if dataclasses.is_dataclass(o) and not isinstance(o, type):
            return dataclasses.asdict(o)
        return super().default(o)


def default_json_serializer(o: Any) -> str:
    return json.dumps(o, cls=JsonDataclassEncoder)


{% for module_name, operations in modules.items() %}
class {{module_name.capitalize()}}Module():
    def __init__(self, session: 'ClientSession', server_url: str):
        self.session: ClientSession = session
        self.server_url: str = server_url

{% for operation in operations %}
    async def {{operation.name}}(self
        {%- if operation.required_arguments or operation.optional_arguments %}, {% endif -%}
        {%- for arg in operation.required_arguments -%}
            {{arg.name}}: {{arg.type}}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        {%- if operation.required_arguments and operation.optional_arguments %}, {% endif -%}
        {%- for arg in operation.optional_arguments -%}
            {{arg.name}}: {{arg.type}} | None = None{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    ) -> {% for resp_code, resp_res in operation.responses_success.items() -%}
             Success[Literal[{{resp_code}}], {{resp_res}}]
             {%- if not loop.last %} | {% endif -%}
         {%- endfor -%}
         {%- if operation.responses_error %} | {% endif -%}
         {%- for resp_code, resp_res in operation.responses_error.items() -%}
             Error[Literal[{{resp_code}}], {{resp_res}}]
             {%- if not loop.last %} | {% endif -%}
         {%- endfor %}:
        url = f'{self.server_url}{{operation.endpoint}}'

        {%- if operation.query_parameters %}
        params = {
        {%- for parameter in operation.query_parameters -%}
            "{{parameter}}": {{parameter}},
        {%- endfor -%}
        }
        params = prep_serialization(params)
        {%- endif %}

        async with self.session.{{operation.method}}(url,
        {%- if operation.query_parameters -%}
            params=params,
        {%- endif %}
        {%- if operation.body -%}
        {%- if operation.body_schema == 'JSON' -%}
            json=body,
        {%- elif operation.body_schema == 'FORM' -%}
            data=aiohttp.FormData(body.model_dump(by_alias=True)),
        {%- endif -%}
        {%- endif -%}
        ) as resp:
            {%- for code, type in operation.responses_success.items() %}
            if resp.status == {{code}}:
                return Success[Literal[{{code}}], {{type}}](
                    code={{code}}, result={% if type == 'None' -%}None
                                          {%- elif ' | ' in type -%}
                                              {%- set instantiable_type = type[6:-1].split(',')[0] -%}
                                              {%- if instantiable_type.startswith('list[') and instantiable_type.endswith(']') -%}
                                                  [{{instantiable_type[5:-1]}}(**e) for e in (await resp.json())]
                                              {%- else -%}
                                                  {{instantiable_type}}(**(await resp.json()))
                                              {%- endif -%}
                                          {%- elif type.startswith('list[') and type.endswith(']') -%}
                                              [{{type[5:-1]}}(**e) for e in (await resp.json())]
                                          {%- else -%}
                                              {{type}}(**(await resp.json()))
                                          {%- endif -%})
            {%- endfor %}
            {%- for code, type in operation.responses_error.items() %}
            if resp.status == {{code}}:
                return Error[Literal[{{code}}], {{type}}](
                    code={{code}}, result={% if type == 'None' -%}None
                                          {%- elif ' | ' in type -%}
                                              {%- set instantiable_type = type[6:-1].split(',')[0] -%}
                                              {%- if instantiable_type.startswith('list[') and instantiable_type.endswith(']') -%}
                                                  [{{instantiable_type[5:-1]}}(**e) for e in (await resp.json())]
                                              {%- else -%}
                                                  {{instantiable_type}}(**(await resp.json()))
                                              {%- endif -%}
                                          {%- elif type.startswith('list[') and type.endswith(']') -%}
                                              [{{type[5:-1]}}(**e) for e in (await resp.json())]
                                          {%- else -%}
                                              {{type}}(**(await resp.json()))
                                          {%- endif -%})
            {%- endfor %}
            raise aiohttp.ClientResponseError(resp.request_info, resp.history, status=resp.status, message=str(resp.reason), headers=resp.headers)
{% endfor %}

{% endfor %}

class ClientSession(aiohttp.ClientSession):
    def __init__(self, server_url: str, *args, **kwargs):
        super().__init__(*args, **kwargs)
        {% for module in modules -%}
        self.{{module}}: {{module.capitalize()}}Module = {{module.capitalize()}}Module(self, server_url)
        {% endfor %}

{% for server in servers %}
def get{% if server.name %}_{{server.name}}{% endif %}_session(server_url: str, *args, json_serialize=default_json_serializer, **kwargs) -> ClientSession:
    return ClientSession(server_url, *args, json_serialize=json_serialize, **kwargs)
{% endfor %}
